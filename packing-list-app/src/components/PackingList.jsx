import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import templates from "../data/templates";
import ChecklistSection from "../components/ChecklistSection";
import axios from "axios";
import { jsPDF } from "jspdf";

export default function PackingList() {
  const [tripType, setTripType] = useState("");
  const [packingData, setPackingData] = useState({});
  const [customItems, setCustomItems] = useState({});
  const [packedStatus, setPackedStatus] = useState({});
  const [tripId, setTripId] = useState(null);
  const [trip, setTrip] = useState({});
  const navigate = useNavigate();

  useEffect(() => {
    const fetchTrip = async () => {
      
      try {
        const res = await axios.get("http://localhost:5000/api/trips", {
          withCredentials: true,
        });

        if (res.status !== 200 || !res.data.length) {
           throw new Error("No trips found");
         }

        const latest = trips[0];
        setTripType(latest.type);
        setTripId(latest._id);
        setTrip(latest);
        setCustomItems(latest.customItems || {});
        setPackedStatus(latest.packedItems || {});

        const template = templates[latest.type] || {};
        setPackingData(template);
      } 
      catch (err) {
        console.error("Failed to load trip:", err);
        alert("Please login again");
        navigate("/login");
      }
    };

    fetchTrip();
  }, [navigate]);

  const updateTrip = async (updates) => {
    try {
      await axios.put(`http://localhost:5000/api/trips/${tripId}`, updates, {
        withCredentials:true,
      });
    } catch (err) {
      console.error("Failed to update trip:", err);
    }
  };

  const handleAddItem = (category, item) => {
    if (!item.trim()) return;
    const updated = {
      ...customItems,
      [category]: [...(customItems[category] || []), item],
    };
    setCustomItems(updated);
    updateTrip({ customItems: updated });
  };

  const handleRemoveItem = (category, index) => {
    const updated = { ...customItems };
    updated[category].splice(index, 1);
    setCustomItems(updated);
    updateTrip({ customItems: updated });
  };

  const handleCheckboxChange = (item) => {
    const updated = {
      ...packedStatus,
      [item]: !packedStatus[item],
    };
    setPackedStatus(updated);
    updateTrip({ packedItems: updated });
  };

  const exportList = () => {
    if (!tripType || !packingData || !tripId) {
       alert("Trip data not available");
       return;
    }

    const doc = new jsPDF();
    const currentDate = new Date().toLocaleDateString();

    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("Packing List", 20, 20);

    doc.setFont("helvetica", "normal");
    doc.setFontSize(12);
    doc.text(`Trip Type: ${tripType}`, 20, 30);
    doc.text(`Destination: ${trip.destination || "Not specified"}`, 20, 36);
    doc.text(`Duration: ${trip.days || "N/A"} day(s)`, 20, 42);
    doc.text(`Created On: ${currentDate}`, 20, 48);

    doc.setDrawColor(0);
    doc.line(20, 50, 190, 50);

    let y = 58;

    Object.entries(packingData).forEach(([category, items]) => {
       doc.setFont("helvetica", "bold");
       doc.setFontSize(14);
       doc.setTextColor(33, 33, 33);
       doc.text(category, 20, y);
       y += 6;

      doc.setDrawColor(180);
      doc.line(20, y, 190, y);
      y += 4;

      doc.setFont("helvetica", "normal");
      doc.setFontSize(12);
      doc.setTextColor(60);

      items.forEach((item) => {
        doc.text(`- ${item}`, 26, y);
        y += 6;
      });

     (customItems[category] || []).forEach((item) => {
       doc.text(`- ${item} (custom)`, 26, y);
       y += 6;
     });
 
     y += 6;
     if (y > 270) {
      doc.addPage();
      y = 20;
    }
  });

  doc.setFontSize(10);
  doc.setTextColor(150);
  doc.text(`Generated by Virtual Packing List App`, 20, doc.internal.pageSize.height - 10);

  doc.save(`Packing_List_${tripType.replace(/\s+/g, "_")}.pdf`);
};

  return (
    <>
    <div
      style={{
        minHeight: "100vh",
        background: "linear-gradient(to right, #181818, #222831)",
        animation: "floatBg 10s ease-in-out infinite",
      }}
    >
      <nav className="navbar navbar-expand-lg navbar-dark bg-dark bg-opacity-75 shadow-sm">
        <div className="container">
          <a className="navbar-brand fw-bold" href="/">
            Virtual Packing List
          </a>
        </div>
      </nav>

      <div className="container py-5">
        <div
          className="mx-auto text-white p-4 rounded-4 shadow"
          style={{
            maxWidth: "800px",
            background: "rgba(0, 0, 0, 0.5)",
            backdropFilter: "blur(12px)",
            fontSize: "0.95rem",
          }}
        >
          <div className="text-center mb-4">
            <h4 className="fw-bold">Packing List for {tripType}</h4>
            <button className="btn btn-success btn-sm mt-2" onClick={exportList}>
              Export List
            </button>
          </div>

          {Object.entries(packingData).map(([category, items]) => (
              <ChecklistSection
                key={category}
                title={category}
                items={[...items, ...(customItems[category] || [])]}
                packedStatus={packedStatus}
                toggleItem={handleCheckboxChange}
                removeItem={(index) => handleRemoveItem(category, index)}
                templates={items}
                addItem={handleAddItem}
              />     
          ))}
        </div>
      </div>

      <style>
        {`
          @keyframes floatBg {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
          }
        `}
      </style>

    </div>
    </>
  );
}